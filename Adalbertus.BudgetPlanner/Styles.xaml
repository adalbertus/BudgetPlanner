<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:extToolkit="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit/extended"
                    xmlns:ctrl="clr-namespace:Adalbertus.BudgetPlanner.Controls">
    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="LightBlue"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey }" Color="DodgerBlue"/>
    <LinearGradientBrush x:Key="LightBlueGradient" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Offset="1" Color="LightBlue"/>
        <GradientStop Offset="0" Color="White"/>
    </LinearGradientBrush>


    <!-- TextBlock -->
    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!-- TextBox -->
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="Background" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- extToolkit:DecimalUpDown -->
    <Style TargetType="{x:Type ctrl:NumericTextBox}">
        <Setter Property="FormatString" Value="C2" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="Background" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- GroupBox -->
    <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource {x:Type GroupBox}}">
        <Setter Property="Margin" Value="4" />
    </Style>

    <!-- AnimatedExpanderButtonTemplate based on http://www.codeproject.com/KB/WPF/ExpanderTemplateArticle.aspx -->
    <ControlTemplate x:Key="AnimatedExpanderButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder" CornerRadius="4" BorderThickness="0" BorderBrush="LightGray"
                Padding="{TemplateBinding Padding}" Background="{StaticResource LightBlueGradient}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="0" VerticalAlignment="Top" Margin="4">
                    <Ellipse Name="Circle" Grid.Column="0" Stroke="DarkGray" Width="20" Height="20" 
                           HorizontalAlignment="Center" VerticalAlignment="Center" />
                    <Path x:Name="Arrow" Grid.Column="0" Data="M 1,1.5 L 4.5,5 8,1.5" Stroke="#FF666666"
                        StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center"
                        RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <RotateTransform Angle="0"/>
                        </Path.RenderTransform>
                    </Path>
                </Grid>
                <ContentPresenter x:Name="HeaderContent" Grid.Column="1" Margin="0,0,4,0" ContentSource="Content" 
                    VerticalAlignment="Center" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!-- Animate arrow when toggled-->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="CornerRadius" Value="4,4,0,0" TargetName="ExpanderButtonBorder"/>
                <Setter Property="BorderThickness" Value="0 0 0 1" TargetName="ExpanderButtonBorder"/>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                             To="180" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                             To="0" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Stroke" Value="#FF3C7FB1" TargetName="Circle"/>
                <Setter Property="Stroke" Value="#222" TargetName="Arrow"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Stroke" Value="#FF526C7B" TargetName="Circle"/>
                <Setter Property="StrokeThickness" Value="1.5" TargetName="Circle"/>
                <Setter Property="Stroke" Value="#FF003366" TargetName="Arrow"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--NormalExpander: based on http://www.codeproject.com/KB/WPF/ExpanderTemplateArticle.aspx -->
    <ControlTemplate x:Key="NormalExpander" TargetType="{x:Type Expander}">
        <Border BorderBrush="LightGray" BorderThickness="1" CornerRadius="4">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <ToggleButton x:Name="ExpanderButton" Grid.Row="0" Template="{StaticResource AnimatedExpanderButtonTemplate}"
                                  Content="{TemplateBinding Header}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                  OverridesDefaultStyle="True" />

                <ContentPresenter x:Name="ExpanderContent" Grid.Row="1" Visibility="Collapsed"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--AnimatedExpander-->
    <ControlTemplate x:Key="AnimatedExpander" TargetType="{x:Type Expander}">
        <DockPanel>
            <ToggleButton x:Name="ExpanderButton" DockPanel.Dock="Top" Template="{StaticResource AnimatedExpanderButtonTemplate}"
                          Content="{TemplateBinding Header}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                          OverridesDefaultStyle="True" Padding="1.5,0">
            </ToggleButton>
            <ContentPresenter x:Name="ExpanderContent" ContentSource="Content" DockPanel.Dock="Bottom">
                <ContentPresenter.LayoutTransform>
                    <ScaleTransform ScaleY="0"/>
                </ContentPresenter.LayoutTransform>
            </ContentPresenter>
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                             To="1" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                             To="0" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Expander-->
    <Style TargetType="{x:Type Expander}" BasedOn="{StaticResource {x:Type Expander}}">
        <Setter Property="Template" Value="{StaticResource NormalExpander}" />
        <Setter Property="Margin" Value="4" />
    </Style>

    <!--DataGrid-->
    <Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="SelectionUnit" Value="Cell" />
        <Setter Property="VerticalGridLinesBrush" Value="WhiteSmoke" />
        <Setter Property="HorizontalGridLinesBrush" Value="WhiteSmoke" />
        <Setter Property="Background" Value="White" />
    </Style>

    <!--NumericUpDownPropertyChanged-->
    <Style x:Key="NumericUpDownPropertyChanged" TargetType="Control">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <extToolkit:ButtonSpinner x:Name="Spinner" IsTabStop="False" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}"
                                         AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}" ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}">
                        <extToolkit:WatermarkTextBox x:Name="TextBox" BorderThickness="0"
                                                Background="Transparent"
                                                ContextMenu="{TemplateBinding ContextMenu}"
                                                FontFamily="{TemplateBinding FontFamily}" 
                                                FontSize="{TemplateBinding FontSize}" 
                                                FontStretch="{TemplateBinding FontStretch}"
                                                FontStyle="{TemplateBinding FontStyle}" 
                                                FontWeight="{TemplateBinding FontWeight}" 
                                                Foreground="{TemplateBinding Foreground}" 
                                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                                MinWidth="20" AcceptsReturn="False"
                                                Padding="0"
                                                SelectAllOnGotFocus="{Binding SelectAllOnGotFocus, RelativeSource={RelativeSource TemplatedParent}}"
                                                TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                                TextWrapping="NoWrap" 
                                                TabIndex="{TemplateBinding TabIndex}"
                                                Text="{Binding Text, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}"
                                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}"
                                                WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </extToolkit:ButtonSpinner>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DecimalUpDownPropertyChanged-->
    <Style x:Key="DecimalUpDownPropertyChanged" TargetType="{x:Type extToolkit:DecimalUpDown}" BasedOn="{StaticResource NumericUpDownPropertyChanged}">
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
    </Style>
</ResourceDictionary>