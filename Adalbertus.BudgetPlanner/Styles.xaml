<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:extToolkit="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit/extended"
                    xmlns:ctrl="clr-namespace:Adalbertus.BudgetPlanner.Controls"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna,Version=3.0.0.0,Culture=neutral,PublicKeyToken=31bf3856ad364e35">

    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="AliceBlue"/>
    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey }" Color="DodgerBlue"/>
    <LinearGradientBrush x:Key="LightBlueGradientVertical" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Offset="1" Color="LightBlue"/>
        <GradientStop Offset="0" Color="White"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="LightBlueGradientHorizontal" StartPoint="1,0" EndPoint="0,0">
        <GradientStop Offset="1" Color="LightBlue"/>
        <GradientStop Offset="0" Color="White"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="BackgroundGradientBrush">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFD2D4D2" Offset="0" />
            <GradientStop Color="#FFFFFFFF" Offset="1" />
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="BorderGradientBrush">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FF004C94" Offset="0" />
            <GradientStop Color="#FF003C74" Offset="1" />
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="TextBoxBorder" EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
        <GradientStop Color="#ABADB3" Offset="0.05"/>
        <GradientStop Color="#E2E3EA" Offset="0.07"/>
        <GradientStop Color="#E3E9EF" Offset="1"/>
    </LinearGradientBrush>


    <!-- TextBlock -->
    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!-- TextBox -->
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorder}"/>
        <Setter Property="Padding" Value="3"/>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="Background" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ctrl:NumericTextBox -->
    <Style TargetType="{x:Type ctrl:NumericTextBox}">
        <Setter Property="FormatString" Value="C2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="DefaultValue" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="Background" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- extToolkit:WatermarkTextBox -->
    <Style TargetType="{x:Type extToolkit:WatermarkTextBox}" BasedOn="{StaticResource {x:Type extToolkit:WatermarkTextBox}}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="Background" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style x:Key="OverlayRectangle" TargetType="{x:Type Rectangle}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Fill" Value="Black" />
        <Setter Property="Opacity" Value="0.5" />
    </Style>

    <!-- GroupBox -->
    <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource {x:Type GroupBox}}">
        <Setter Property="Margin" Value="4" />
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="BorderBrush" Value="Transparent" />
    </Style>

    <Style x:Key="Button80" TargetType="{x:Type ctrl:ImageButton}" BasedOn="{StaticResource {x:Type ctrl:ImageButton}}">
        <Setter Property="Width" Value="80" />
    </Style>

    <Style x:Key="DeleteButton" TargetType="{x:Type ctrl:ImageButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="ImageUrl" Value="Images/delete.png" />
    </Style>

    <Style x:Key="DialogImage" TargetType="{x:Type Image}">
        <Setter Property="Width" Value="128" />
        <Setter Property="Height" Value="128" />
    </Style>

    <Style x:Key="QuestionImage" TargetType="{x:Type Image}" BasedOn="{StaticResource DialogImage}">
        <Setter Property="Source" Value="/Adalbertus.BudgetPlanner;component/Images/dialog-question.png" />
    </Style>

    <Style x:Key="InformationImage" TargetType="{x:Type Image}" BasedOn="{StaticResource DialogImage}">
        <Setter Property="Source" Value="/Adalbertus.BudgetPlanner;component/Images/dialog-information.png" />
    </Style>
   
    <Style x:Key="WarningImage" TargetType="{x:Type Image}" BasedOn="{StaticResource DialogImage}">
        <Setter Property="Source" Value="/Adalbertus.BudgetPlanner;component/Images/dialog-warning.png" />
    </Style>

    <Style x:Key="ErrorImage" TargetType="{x:Type Image}" BasedOn="{StaticResource DialogImage}">
        <Setter Property="Source" Value="/Adalbertus.BudgetPlanner;component/Images/dialog-error.png" />
    </Style>

    <Style x:Key="HoverBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="4" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DialogButtonsBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="Background" Value="{StaticResource LightBlueGradientVertical}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="CornerRadius" Value="0,0,10,10" />
    </Style>

    <Style x:Key="LinkButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock TextDecorations="Underline">
                    <ContentPresenter />
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="Blue" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontWeight" Value="Bold" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="Red" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ImageButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid Margin="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Image x:Name="ImageControl" Grid.Column="0" Source="{Binding Path=(ext:ImageExtension.ImageSource), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                                   HorizontalAlignment="Left" Margin="4,0,0,0" Height="16" Width="16" />
                        <TextBlock x:Name="TextControl" Grid.Column="1" Margin="4,0,0,0"
                                       Text="{TemplateBinding Content}" HorizontalAlignment="Center"/>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Text, ElementName=TextControl}" Value="">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="TextControl"/>
                            <Setter Property="HorizontalAlignment" Value="Center" TargetName="ImageControl"/>
                            <Setter Property="Margin" Value="0" TargetName="ImageControl"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Content}" Value="">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Width" Value="22" />
                <Setter Property="Height" Value="22" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- AnimatedExpanderButtonTemplate based on http://www.codeproject.com/KB/WPF/ExpanderTemplateArticle.aspx -->
    <ControlTemplate x:Key="AnimatedExpanderButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder" CornerRadius="4" BorderThickness="0" BorderBrush="LightGray"
                Padding="{TemplateBinding Padding}" Background="{StaticResource LightBlueGradientVertical}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="0" VerticalAlignment="Top" Margin="4">
                    <Ellipse Name="Circle" Grid.Column="0" Stroke="DarkGray" Width="20" Height="20" 
                           HorizontalAlignment="Center" VerticalAlignment="Center" />
                    <Path x:Name="Arrow" Grid.Column="0" Data="M 1,1.5 L 4.5,5 8,1.5" Stroke="#FF666666"
                        StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center"
                        RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <RotateTransform Angle="0"/>
                        </Path.RenderTransform>
                    </Path>
                </Grid>
                <ContentPresenter x:Name="HeaderContent" Grid.Column="1" Margin="0,0,4,0" ContentSource="Content" 
                    VerticalAlignment="Center" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!-- Animate arrow when toggled-->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="CornerRadius" Value="4,4,0,0" TargetName="ExpanderButtonBorder"/>
                <Setter Property="BorderThickness" Value="0 0 0 1" TargetName="ExpanderButtonBorder"/>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                             To="180" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                             To="0" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Stroke" Value="#FF3C7FB1" TargetName="Circle"/>
                <Setter Property="Stroke" Value="#222" TargetName="Arrow"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Stroke" Value="#FF526C7B" TargetName="Circle"/>
                <Setter Property="StrokeThickness" Value="1.5" TargetName="Circle"/>
                <Setter Property="Stroke" Value="#FF003366" TargetName="Arrow"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--NormalExpander: based on http://www.codeproject.com/KB/WPF/ExpanderTemplateArticle.aspx -->
    <ControlTemplate x:Key="NormalExpander" TargetType="{x:Type Expander}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <ToggleButton x:Name="ExpanderButton" Grid.Row="0" Template="{StaticResource AnimatedExpanderButtonTemplate}"
                                  Content="{TemplateBinding Header}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                  OverridesDefaultStyle="True" />

                <ContentPresenter x:Name="ExpanderContent" Grid.Row="1" Visibility="Collapsed"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--AnimatedExpander-->
    <ControlTemplate x:Key="AnimatedExpander" TargetType="{x:Type Expander}">
        <DockPanel>
            <ToggleButton x:Name="ExpanderButton" DockPanel.Dock="Top" Template="{StaticResource AnimatedExpanderButtonTemplate}"
                          Content="{TemplateBinding Header}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                          OverridesDefaultStyle="True" Padding="1.5,0">
            </ToggleButton>
            <ContentPresenter x:Name="ExpanderContent" ContentSource="Content" DockPanel.Dock="Bottom">
                <ContentPresenter.LayoutTransform>
                    <ScaleTransform ScaleY="0"/>
                </ContentPresenter.LayoutTransform>
            </ContentPresenter>
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                             To="1" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                             To="0" Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Expander-->
    <Style TargetType="{x:Type Expander}" BasedOn="{StaticResource {x:Type Expander}}">
        <Setter Property="Template" Value="{StaticResource NormalExpander}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="Margin" Value="4" />
    </Style>

    <!--DataGrid-->
    <Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="SelectionUnit" Value="Cell" />
        <Setter Property="VerticalGridLinesBrush" Value="WhiteSmoke" />
        <Setter Property="HorizontalGridLinesBrush" Value="WhiteSmoke" />
        <Setter Property="Background" Value="White" />
    </Style>

    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--NumericUpDownPropertyChanged-->
    <Style x:Key="NumericUpDownPropertyChanged" TargetType="Control">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <extToolkit:ButtonSpinner x:Name="Spinner" IsTabStop="False" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}"
                                         AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}" ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}">
                        <extToolkit:WatermarkTextBox x:Name="TextBox" BorderThickness="0"
                                                Background="Transparent"
                                                ContextMenu="{TemplateBinding ContextMenu}"
                                                FontFamily="{TemplateBinding FontFamily}" 
                                                FontSize="{TemplateBinding FontSize}" 
                                                FontStretch="{TemplateBinding FontStretch}"
                                                FontStyle="{TemplateBinding FontStyle}" 
                                                FontWeight="{TemplateBinding FontWeight}" 
                                                Foreground="{TemplateBinding Foreground}" 
                                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                                MinWidth="20" AcceptsReturn="False"
                                                Padding="0"
                                                SelectAllOnGotFocus="{Binding SelectAllOnGotFocus, RelativeSource={RelativeSource TemplatedParent}}"
                                                TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                                TextWrapping="NoWrap" 
                                                TabIndex="{TemplateBinding TabIndex}"
                                                Text="{Binding Text, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}"
                                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}"
                                                WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </extToolkit:ButtonSpinner>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DecimalUpDownPropertyChanged-->
    <Style x:Key="DecimalUpDownPropertyChanged" TargetType="{x:Type extToolkit:DecimalUpDown}" BasedOn="{StaticResource NumericUpDownPropertyChanged}">
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
    </Style>

    <Style x:Key="RadioButtonControlTemplateStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" StrokeThickness="1" Stroke="#FF000000" StrokeDashArray="1 2" SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DialogRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Control.Background" Value="{StaticResource BackgroundGradientBrush}" />
        <Setter Property="Control.BorderBrush" Value="{StaticResource BorderGradientBrush}" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid Margin="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="20"/>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0" BorderBrush="LightGray" BorderThickness="1" CornerRadius="4,0,0,4" Background="{StaticResource LightBlueGradientHorizontal}">
                            <BulletDecorator Background="#00FFFFFF" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <BulletDecorator.Bullet>
                                    <theme:BulletChrome IsRound="True" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" IsChecked="{TemplateBinding ToggleButton.IsChecked}" RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}" RenderPressed="{TemplateBinding ButtonBase.IsPressed}" />
                                </BulletDecorator.Bullet>
                            </BulletDecorator>
                        </Border>
                        <Border Grid.Column="1" BorderBrush="LightGray" BorderThickness="0,1,1,1" Padding="4">
                            <ContentPresenter Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" RecognizesAccessKey="True" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ContentControl.HasContent" Value="True">
                            <Setter Value="{StaticResource RadioButtonControlTemplateStyle}" Property="FrameworkElement.FocusVisualStyle" />
                            <Setter Property="Control.Padding" Value="2,0,0,0" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <SolidColorBrush x:Key="InputBackgroundFocused" Color="Orange"></SolidColorBrush>

    <Style x:Key="CheckBoxFocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border CornerRadius="2" Margin="0,0,4,3" BorderThickness="2" BorderBrush="{StaticResource InputBackgroundFocused}" Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Fill Brushes -->

    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#AAA" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#BBB" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="0.1"/>
                <GradientStop Color="#EEE" Offset="0.9"/>
                <GradientStop Color="#FFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />

    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

    <!-- Border Brushes -->

    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#777" Offset="0.0"/>
                <GradientStop Color="#000" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#444" Offset="0.0"/>
                <GradientStop Color="#888" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />

    <!-- Miscellaneous Brushes -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisualStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"  
                              Width="17" 
                              Height="17" 
                              CornerRadius="2" 
                              Background="{StaticResource NormalBrush}"
                              BorderThickness="1"
                              BorderBrush="{StaticResource NormalBorderBrush}">
                                <Path 
                                Width="11" Height="11" 
                                x:Name="CheckMark"
                                SnapsToDevicePixels="False" 
                                Stroke="{StaticResource GlyphBrush}"
                                StrokeThickness="2"
                                Data="M 2,4 C 2,4 3,5 5,13 C 5,13 5,3 12,0" />
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="4,0,0,0"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>